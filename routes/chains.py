from fastapi import APIRouter, Depends
from pytest import Session

from auth_deps import get_current_user
from database import get_db
from models.user import User

router = APIRouter(prefix="/chains", tags=["Chains"])

chains = {
  "Foundational Chains": {
    "eth-mainnet": "Ethereum",
    "eth-sepolia": "Ethereum Sepolia Testnet",
    "eth-holesky": "Ethereum Holesky Testnet",
    "matic-mainnet": "Polygon",
    "polygon-amoy-testnet": "Polygon Amoy Testnet",
    "bsc-mainnet": "BNB Smart Chain (BSC)",
    "bsc-testnet": "BNB Smart Chain (BSC) Testnet",
    "optimism-mainnet": "Optimism",
    "optimism-sepolia": "Optimism Sepolia Testnet",
    "base-mainnet": "Base",
    "base-sepolia-testnet": "Base Sepolia Testnet",
    "gnosis-mainnet": "Gnosis",
    "gnosis-testnet": "Chiado Testnet"
  },

  "Frontier Chains": {
    "btc-mainnet": "Bitcoin",
    "solana-mainnet": "Solana",
    "unichain-mainnet": "Unichain",
    "unichain-sepolia-testnet": "Unichain Testnet",
    "berachain-mainnet": "Berachain",
    "berachain-testnet": "Berachain Testnet",
    "apechain-mainnet": "ApeChain",
    "apechain-testnet": "ApeChain Testnet",
    "arbitrum-mainnet": "Arbitrum",
    "arbitrum-sepolia": "Arbitrum Sepolia Testnet",
    "arbitrum-nova-mainnet": "Arbitrum Nova",
    "avalanche-mainnet": "Avalanche C-Chain",
    "avalanche-testnet": "Avalanche Fuji Testnet",
    "axie-mainnet": "Axie/Ronin",
    "boba-bnb-mainnet": "Boba BNB",
    "boba-bnb-testnet": "Boba BNB Testnet",
    "boba-mainnet": "Boba Ethereum",
    "gunzilla-testnet": "Gunzilla Testnet",
    "hyperevm-mainnet": "HyperEVM",
    "ink-mainnet": "Ink",
    "ink-sepolia-testnet": "Ink Testnet",
    "lens-mainnet": "Lens",
    "lens-sepolia-testnet": "Lens Testnet",
    "linea-mainnet": "Linea",
    "linea-sepolia-testnet": "Linea Sepolia Testnet",
    "mantle-mainnet": "Mantle",
    "mantle-sepolia-testnet": "Mantle Testnet",
    "monad-testnet": "Monad Testnet",
    "oasis-sapphire-mainnet": "Oasis Sapphire",
    "oasis-sapphire-testnet": "Oasis Sapphire Testnet",
    "palm-mainnet": "Palm",
    "palm-testnet": "Palm Testnet",
    "scroll-mainnet": "Scroll",
    "scroll-sepolia-testnet": "Scroll Sepolia Testnet",
    "sei-mainnet": "Sei",
    "taiko-mainnet": "Taiko",
    "taiko-hekla-testnet": "Taiko Hekla Testnet",
    "viction-mainnet": "Viction",
    "viction-testnet": "Viction Testnet",
    "world-mainnet": "World Chain",
    "world-sepolia-testnet": "World Chain Testnet",
    "zksync-mainnet": "zkSync Era",
    "zksync-sepolia-testnet": "zkSync Sepolia Testnet",
    "zora-mainnet": "Zora",
    "zora-sepolia-testnet": "Zora Sepolia Testnet"
  },

  "Community Chains": {
    "aurora-mainnet": "Aurora",
    "aurora-testnet": "Aurora Testnet",
    "avalanche-beam-mainnet": "Beam",
    "avalanche-beam-testnet": "Beam Testnet",
    "avalanche-dexalot-mainnet": "Dexalot",
    "avalanche-dexalot-testnet": "Dexalot Testnet",
    "avalanche-meld-mainnet": "MELDchain",
    "avalanche-meld-testnet": "MELDchain Testnet",
    "avalanche-mirai-testnet": "Mirai Testnet",
    "avalanche-numbers": "Numbers Protocol",
    "avalanche-shrapnel-mainnet": "Shrapnel",
    "avalanche-shrapnel-testnet": "Shrapnel Testnet",
    "avalanche-step-network": "Step Network",
    "avalanche-uptn": "UPTN",
    "avalanche-xanachain": "XANA Chain",
    "blast-mainnet": "Blast",
    "bnb-opbnb-mainnet": "opBNB",
    "bnb-opbnb-testnet": "opBNB Testnet",
    "canto-mainnet": "Canto",
    "celo-mainnet": "Celo",
    "covalent-internal-network-v1": "Covalent",
    "cronos-mainnet": "Cronos",
    "cronos-testnet": "Cronos Testnet",
    "cronos-zkevm-mainnet": "Cronos zkEVM",
    "defi-kingdoms-mainnet": "DeFi Kingdoms",
    "defi-kingdoms-testnet": "DeFi Kingdoms Testnet",
    "emerald-paratime-mainnet": "Oasis",
    "fantom-mainnet": "Fantom",
    "fantom-testnet": "Fantom Testnet",
    "fraxtal-mainnet": "Fraxtal",
    "horizen-eon-mainnet": "Horizen EON",
    "horizen-gobi-testnet": "Horizen Gobi Testnet",
    "manta-sepolia-testnet": "Manta Pacific Testnet",
    "merlin-mainnet": "Merlin",
    "merlin-testnet": "Merlin Testnet",
    "metis-mainnet": "Metis",
    "metis-stardust": "Metis Stardust",
    "metis-testnet": "Metis Testnet",
    "moonbeam-mainnet": "Moonbeam",
    "moonbeam-moonbase-alpha": "Moonbeam Moonbase Alpha Testnet",
    "moonriver-mainnet": "Moonriver",
    "movement-mevm-testnet": "Movement MEVM Devnet",
    "polygon-zkevm-mainnet": "Polygon zkEVM",
    "polygon-zkevm-cardona-testnet": "Polygon zkEVM Cardona Testnet",
    "redstone-mainnet": "Redstone",
    "rollux-mainnet": "Rollux",
    "rollux-testnet": "Rollux Testnet",
    "sx-mainnet": "SX Network",
    "x1-mainnet": "X Layer",
    "zetachain-mainnet": "ZetaChain",
    "zetachain-testnet": "ZetaChain Testnet"
  },

  "Archived Chains": {
    "avalanche-dos": "DOS Chain",
    "bnb-fncy-mainnet": "FNCY",
    "bnb-fncy-testnet": "FNCY Testnet",
    "evmos-mainnet": "Evmos",
    "evmos-testnet": "Evmos Testnet",
    "flarenetworks-canary-mainnet": "Songbird",
    "flarenetworks-canary-testnet": "Songbird Testnet",
    "harmony-mainnet": "Harmony",
    "harmony-testnet": "Harmony Testnet",
    "lisk-mainnet": "Lisk",
    "lisk-sepolia-testnet": "Lisk Sepolia Testnet",
    "loot-mainnet": "Loot Chain",
    "meter-mainnet": "Meter",
    "meter-testnet": "Meter Testnet",
    "milkomeda-c1-mainnet": "Milkomeda C1",
    "mode-mainnet": "Mode",
    "mode-testnet": "Mode Testnet",
    "telos-mainnet": "Telos",
    "telos-testnet": "Telos Testnet",
    "ultron-mainnet": "Ultron",
    "ultron-testnet": "Ultron Testnet"
  }
}

@router.get("/")
def get_chains(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    return chains
